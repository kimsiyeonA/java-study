package infJava_B_Basic.A_1_Class;

// 클래스 도입 - 메인 클래스

public class ClassStart3 {
    public static void main(String[] args) {
        Student student1; // 첫번째 학생을 담을 수 있는 변수를 선언
        student1 = new Student();
        // 학생을 실제 메모리에 만듬, 학생에 대한 메모리를 변수에 담음
        // 변수를 통헤 학생을 사용할 수 있음

        student1.name = "학생1"; // 클래스에 만든것은 .을 통해 접근할 수 있음, 접근해서 값을 담음
        student1.age = 15;
        student1.grade = 90;

        Student student2 = new Student(); //student1과 다른 학생 메모리를 또 만든다.
        student2.name = "학생2";
        student2.age = 16;
        student2.grade = 80;

        System.out.println(student1); // infJavaBasic.A_1_Class.Student@2f4d3709
        System.out.println(student2); // infJavaBasic.A_1_Class.Student@4e50df2e
        // @앞은 패키지 + 클래스 정보를 뜻한다. @뒤에 16진수는 참조값을 뜻한다

        System.out.println("이름: " + student1.name + " 나이: " + student1.age + " 성적: " + student1.grade);
        System.out.println("이름: " + student2.name + " 나이: " + student2.age + " 성적: " + student2.grade);
    }

    // 클래스와 사용자 정의 타입
    // - 타입은 데이터의 종류나 형태를 나타낸다.
    // - int 라고하면 정수 타입, String 이라고 하면 문자타입니다.
    //   int 에 정수를 넣고 String 에 문자를 넣는 것처럼 학생을 넣을 수 있게 만드는 그릇 셜계도를 만드는 것
    // - 클래스를 이용하면 int, String 과 같은 타입을 직접 만들 수 있다.
    // - 사용자가 직접 정의하는 사용자 정의 타입을 만들려면 설계도가 필요하다. 이 설계도가 바로 클래스이다.
    // - 설계도(붕어빵틀)인 클래스를 사용해서 실제 메모리에 만들어진 실체(붕어빵)를 객체 또는 인스턴스(new Student)라 한다.
    // - 클래스를 통해서 사용자가 원하는 종류의 데이터 타입을 마음껏 정의 할 수 있다.

    // 용어: 클래스, 객체, 인스턴스
    // 클래스는 설계도이고, 이 설계도를 기반을 실제 메모리에 만들어진 실체를 객체 또는 인스턴스라 한다.
    // 둘다 같은 의미로 사용된다.
    // 여기서는 학생(Student) 클래스를 기반으로 학생1(student1), 학생2(student2) 객체 또는 인스턴스를 만들었다.

    // 1. 변수 선언
    // Student student1 // Student 변수 선언
    // - Student 타입을 받을 수 있는 변수를 선언한다.
    // - int 는 정수를, String 은 문자를 담을 수 있듯이 Student 는 Student 타입의 객체(인스턴스)를 받을 수 있다.

    // 2. 객체 생성
    // student1 = new Student() // Student 인스턴스 생성
    // - 객체를 사용하려면먼저 설계도인 클래스를 기반으로 객체(인스턴스)를 생성해야 한다.
    // - new Student() : new 는 새로 생성한다는 뜻이다.
    //   new Student() 는 Student 클래스 정보를 기반으로 새로운 객체를 생성하라는 뜻이다.
    //   이렇게 하면 메모리에 실제 Student 객체(인스턴스)를 생성한다.
    // - 객체를 생성할 때는 new 클래스명() 을 사용하면 된다. 마지막에 () 도 추가해야 한다.
    // - Student 클래스는 String name , int age , int grade 멤버 변수를 가지고 있다.
    //   이 변수를 사용하는데 필요한 메모리 공간도 함께 확보한다.

    // 3. 참조값 보관
    // Student student1 = x001 // Student 인스턴스 참조값 보관
    // - 객체를 생성하면 자바는 메모리 어딘가에 있는 이 객체에 접근할 수 있는 참조값(주소)( x001 )을 반환한다.
    //   여기서 x001 이라고 표현한 것이 참조값이다. (실제로 x001 처럼 표현되는 것은 아니고 이해를 돕기 위한 예시이다.)
    // - new 키워드를 통해 객체가 생성되고 나면 참조값을 반환한다.
    //   앞서 선언한 변수인 Student student1 에 생성된 객체의 참조값( x001 )을 보관한다.
    // - Student student1 변수는 이제 메모리에 존재하는 실제 Student 객체(인스턴스)의 참조값을 가지고 있다.

    // 참조값을 변수에 보관해야 하는 이유
    // 객체를 생성하는 new Student() 코드 자체에는 아무런 이름이 없다.
    // 이 코드는 단순히 Student 클래스를 기반으로 메모리에 실제 객체를 만드는 것이다.
    // 따라서 생성한 객체에 접근할 수 있는 방법이 필요하다.
    // 이런 이유로 객체를 생성할 때 반환되는 참조값을 어딘가에 보관해두어야 한다.
    // 앞서 Student student1 변수에 참조값( x001 )을 저장해두었으므로 저장한 참조값( x001 )을 통해서 실제 메모리에 존재하는 객체에 접근할 수 있다.

    // Student student1 = new Student(); //1. Student 객체 생성
    // Student student1 = x001; //2. new Student()의 결과로 x001 참조값 반환
    // student1 = x001; //3. 최종 결과

    // ==========================

    // 객체 사용
    // 래스를 통해 생성한 객체를 사용하려면 먼저 메모리에 존재하는 객체에 접근해야 한다.
    // 객체에 접근하려면 . (점, dot)을 사용하면 된다.
    // 이 키워드는 변수( student1 )에 들어있는 참조값( x001 )을 읽어서 메모리에 존재하는 객체에 접근한다

    // 객체에 값 대입
    // student1.name="학생1"
    // 1. student1 객체의 name 멤버 변수에 값 대입
    // x001.name="학생1"
    // 2. 변수에 있는 참조값을 통해 실제 객체에 접근, 해당 객체의 name 멤버 변수에 값 대입
    // x001 참조값으로 객체로 이동해서 객체 안에 있는 변수명과 일치하는 메모리에 값을 넣는다.

    // student1. (dot)이라고 하면 student1 변수가 가지고 있는 참조값을 통해 실제 객체에 접근한다.
    // student1 은 x001 이라는 참조값을 가지고 있으므로 x001 위치에 있는 Student 객체에 접근한다

    // 객체 값 읽기
    //  . (점, dot) 키워드를 통해 참조값을 사용해서 객체에 접근한 다음에 원하는 작업을 하면 된다
    // 1. 객체 값 읽기
    // System.out.println("이름:" + student1.name);
    // 2. 변수에 있는 참조값을 통해 실제 객체에 접근하고, name 멤버 변수에 접근한다.
    // System.out.println("이름:" + x001.name);
    // 3. 객체의 멤버 변수의 값을 읽어옴
    // System.out.println("이름:" + "학생1");

    //==============================

    // 클래스, 객체, 인스턴스 정리

    // 클래스 - Class
    // 클래스는 객체를 생성하기 위한 '틀' 또는 '설계도'이다.
    // 클래스는 객체가 가져야 할 속성(변수)과 기능(메서드)를 정의한다.
    // 예를 들어 학생이라는 클래스는 속성으로 name , age , grade 를 가진다.
    // - 틀: 붕어빵 틀을 생각해보자. 붕어빵 틀은 붕어빵이 아니다!
    //   이렇게 생긴 붕어빵이 나왔으면 좋겠다고 만드는 틀일뿐이다. 실제 먹을 수 있는 것이 아니다.
    //   실제 먹을 수 있는 팥 붕어빵을 객체 또는 인스턴스라 한다.
    // - 설계도: 자동차 설계도를 생각해보자. 자동차 설계도는 자동차가 아니다!
    //   설계도는 실제 존재하는 것이 아니라 개념으로만 있는 것이다.
    //   설계도를 통해 생산한 실제 존재하는 흰색 테슬라 모델 Y 자동차를 객체 또는 인스턴스라 한다.

    // 객체 - Object
    // 객체는 클래스에서 정의한 속성과 기능을 가진 실체이다.
    // 객체는 서로 독립적인 상태를 가진다.
    // 예를 들어 위 코드에서 student1 은 학생1의 속성을 가지는 객체이고, student2 는 학생2의 속성을 가지는 객체이다.
    // student1 과 student2 는 같은 클래스에서 만들어졌지만, 서로 다른 객체이다.

    // 인스턴스 - Instance
    // 인스턴스는 특정 클래스로부터 생성된 객체를 의미한다.
    // 그래서 객체와 인스턴스라는 용어는 자주 혼용된다.
    // 인스턴스는 주로 객체가 어떤 클래스에 속해 있는지 강조할 때 사용한다.
    // 예를 들어서 student1 객체는 Student 클래스의 인스턴스다. 라고 표현한다.

    // 객체 vs 인스턴스
    // 둘다 클래스에서 나온 실체라는 의미에서 비슷하게 사용되지만,
    // 용어상 인스턴스는 객체보다 좀 더 관계에 초점을 맞춘 단어이다.
    // 보통 student1 은 Student 의 객체이다. 라고 말하는 대신 student1 은 Student 의 인스턴스이다.
    // 라고 특정 클래스와의 관계를 명확히 할 때 인스턴스라는 용어를 주로 사용한다.
    // 좀 더 쉽게 풀어보자면, 모든 인스턴스는 객체이지만,
    // 우리가 인스턴스라고 부르는 순간은 특정 클래스로부터 그 객체가 생성되었음을 강조하고 싶을 때이다.
    // 예를 들어 student1 은 객체이지만, 이 객체가 Student 클래스로부터 생성된다는 점을 명확히 하기 위해 student1 을 Student 의 인스턴스라고 부른다.
    // 하지만 둘다 클래스에서 나온 실체라는 핵심 의미는 같기 때문에 보통 둘을 구분하지 않고 사용한다.

    // 객체 new 로 만들어져서 나온 그 자체, 인스터스 어느 소속의 객체인지 의미를 알려주는 것
}

