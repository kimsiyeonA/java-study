package infJava_B_Basic.A_1_Class;

// 클래스가 필요한 이유 - 배열 사용(한계)

// 문제: 학생 정보 출력 프로그램 만들기 - 이전 코드애 배열 넣기
// 당신은 두 명의 학생 정보를 출력하는 프로그램을 작성해야한다.
// 각 학생은 이름, 나이, 성적을 가지고 있다.

// 요구 사항
// 1. 첫 번째 학생의 이름은 "학생1", 나이는 15, 성적은 90입니다.
// 2. 두 번째 학생의 이름은 "학생2", 나이는 16, 성적은 80입니다.
// 3. 각 학생의 정보를 다음과 같은 형식으로 출력해야한다.
//    이름: [이름] 나이: [나이] 성적: [성적]
// 4. 변수를 사용해서 학생 정보를 저장하고 변수를 사용해서 학생 정보를 출력해야합니다.

// 예시 출력
// 이름: 학생1 나이: 15 성적: 90
// 이름: 학생2 나이: 16 성적: 80

public class ClassStart2 {
    public static void main(String[] args) {

        String[] studentNames = new String[]{"학생1", "학생2"};
        int[] studentAges = new int[]{18, 16};
        int[] studentGrades = new int[]{90, 80};

        for(int i = 0; i < studentNames.length; i++){
            System.out.println("이름: " + studentNames[i] + " 나이: " + studentAges[i] + " 성적: " + studentGrades[i]);
        }
    }

    // 배열 사용의 한계

    // 배열을 사용해서 코드 변경을 최소화하는데에는 성공했지만, 한 학생의 데이터가 3개의 배열에 나누어져 있다.
    // 따라서 데이터를 변경할때 매우 조심해서 작업해야한다.
    // 예를 들어거 학생2의 데이터를 제거하려면 각각의 배열마다 학생2의 요소를 정확하게 찾아서 제거해주어야 한다.

    // 한 학생의 데이터가 3개의 배열에 나누어져 있기 때문에 3개의 배열을 각각 변경해야한다.
    // 그리고 한 학생의 데이터를 관리하기 위해 3개 배열의 인덱스 순서를 항상 정확하게 맞춰야한다.
    // 이렇게 하면 특정 학생의 데이터를 변경할 때 실수할 가능성이 매우 높다.
    // 이 코드는 컴퓨터가 볼 때는 아무 문제가 없지만 사람이 관리하기에 좋은 코드가 아니다.

    // 이름, 나이, 성적을 각각 따로 나누어서 관리하는 것은 사람이 관리하기 좋은 방식이 아니다.
    // 사람이 관리하기 좋은 방식은 학생이라는 개념을 하나로 묶는 것이다.
    // 그리고 각각의 학생 별로, 본인의 이름, 나이, 성적을 관리하는 것이다.

    // 해결방법 : 클래스 => 학생이라는 개념을 만들기
    // 개념을 사용할 수 있게 만드는 것을 클래스 라고 한다.

}
