package infJava_B_Basic.A_2_Ref;

// null - null 값 할당

// 택배를 보낼 때 제품은 준비가 되었지만, 보낼 주소지가 아직 결정되지 않아서, 주소지가 결정될 때 까지는 주소지를 비워두어야 할 수 있다.
// 참조형 변수에는 항상 객체가 있는 위치를 가리키는 참조값이 들어간다.
// 참조형 변수에서 아직 가리키는 대상이 없다면 null 이라는 특별한 값을 넣어둘 수 있다.
// null 은 값이 존재하지 않는, 없다는 뜻이다.
public class NullMain1 {
    public static void main(String[] args) {
        Data data = null;
        // Data 타입을 받을 수 있는 참조형 변수 data를 만들었다. 그리고 여기에 null값을 할당했다.
        // 따라서 data 변수에는 아직 가리키는 객체가 없다는 뜻이다.
        System.out.println("1. data = " + data);
        data = new Data(); // 이 주소값을 들고 있는 변수가 없다.
        // 이후에 새로운 Data 객체를 생성해서 그 참조값을 data 변수에 할당했다.
        // 이제 data 변수가 참조할 객체가 존재한다.
        System.out.println("2. data = " + data);
        data = null;
        // 마지막에는 data 에 다시 null 값을 할당했다.
        // 이렇게하면 data 변수는 앞서 만든 Data 인스턴스를 더는 참조하지 않는다.
        System.out.println("3. data = " + data);

        // garbage collection(가비지 컬랙션/쓰레기 청소부)
        // data 에 null 을 할당했다.
        // 따라서 앞서 생성한 x001 Data 인스턴스를 더는 아무도 참조하지 않는다.
        // 이렇게 아무도 참조하지 않게 되면 x001 이라는 참조값을 다시 구할 방법이 없다.
        // 따라서 해당 인스턴스에 다시 접근할 방법이 없다.
        // 이렇게 아무도 참조하지 않는 인스턴스는 사용되지 않고 메모리 용량만 차지할 뿐이다.

        // C와 같은 과거 프로그래밍 언어는 개발자가 직접 명령어를 사용해서 인스턴스를 메모리에서 제거해야 했다.
        // 만약 실수로 인스턴스 삭제를 누락하면 메모리에 사용하지 않는 객체가 가득해져서 메모리 부족 오류가 발생하게 된다.
        // 자바는 이런 과정을 자동으로 처리해준다.
        // 아무도 참조하지 않는 인스턴스가 있으면 JVM의 GC(가비지 컬렉션)가
        // 더 이상 사용하지 않는 인스턴스라 판단하고 해당 인스턴스를 자동으로 메모리에서 제거해준다.

        // 객체는 해당 객체를 참조하는 곳이 있으면, JVM이 종료할 때 까지 계속 생존한다.
        // 그런데 중간에 해당 객체를 참조하는 곳이 모두 사라지면 그때 JVM은 필요 없는 객체로 판단다고 GC(가비지 컬렉션)를 사용해서 제거한다

        // 지역 변수가 메소드 호출 뒤에 없어질 때 참조하지 않을 때 가비지 컬랙션의 대상이 된다.
        // 적정하게 모이면 한번에 삭제함
    }
}
