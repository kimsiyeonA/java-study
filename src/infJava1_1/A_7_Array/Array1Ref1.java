package infJava1_1.A_7_Array;

// 배열
// 같은 타입의 변수를 사용하기 편하게 하나로 묶어둔 것

public class Array1Ref1 {
    public static void main(String[] args) {
        int[] students; // 배열 변수 선언 (int 형 배열)
        students = new int[5]; // 배열 생성 하고 결과를 담음(int 가 연결된 5개 그릇을 만듬)

        System.out.println(students); // [I@b4c966a
        // [I는 int 형 배열을 뜻한다. @b뒤에 16진수는 참조값을 뜻한다.

        // 변수 값 대입
        students[0] = 90;
        students[1] = 80;
        students[2] = 70;
        students[3] = 60;
        students[4] = 50;

        // 변수 값 사용
        System.out.println("학생1 점수: " + students[0]);
        System.out.println("학생2 점수: " + students[1]);
        System.out.println("학생3 점수: " + students[2]);
        System.out.println("학생4 점수: " + students[3]);
        System.out.println("학생5 점수: " + students[4]);
    }

    // 1. 배열 변수 선언
    // 배열을 사용하려면 int[] students;와 같이 배열 변수를 선언해야한다.
    // 일반적인 변수와 차이점은 int[] 처럼 타입 처음에 대괄호([])가 들어간다는 점이다.
    // 배열변수를 선언한다고 해서 아직 사용할 수 있는 배열이 만들어진 것은 아니다.
    // int[] students 와 같은 배열 변수에는 배열을 담을 수 있다.
    // (배열 변수에는 10, 20 같은 값이 아니라 배열이라는 것을 담을 수 있다)

    // 2. 배열 생성
    // 배열을 사용하려면 배열을 생성해야한다.
    // new int[5] 라고 입력하면 종 5개의 int 형 변수가 만들어진다.
    // new 는 새로 생성한다는 뜻이고, int[5]는 int 형 변수 5개라는 뜻이다.
    // 따라서 int 형 변수 5개를 다를 수 있는 배열을 새로 만든다는 뜻이다.

    // 배열과 초기화
    // new int[5] 라고 하면 총 5개의 int 형 변수가 만들어진다.
    // 자바는 배열을 생성할 때 그 내부값을 자동으로 초기화한다.
    // 숫자는 0, boolean 은 false, String 은 null(없다는 뜻이다)로 초기화 된다.

    // 3. 배열 참조값 보관
    // new int[5]로 배열을 생성하면 배열의 크기만큼 메모리를 확보한다.
    //   int 형 5개를 사용하면 4byte * 5 -> 20 byte 를 확보한다.
    // 배열을 생성하고 나면 자바는 메모리 어딘가에 이 배열에 접근할 수 있는 참조값(주소)(x001)을 반환한다.
    //   여기서 x001 로 표현한 것이 참조값이다. (실제로 표현되는것은 아니고 이해를 돕기위한 예시)
    // int[] students 변수는 new int[5]로 생성한 배열의 참조값을 가지고 있다.
    //   배열을 생성하는 new int[5] 자체에는 아무런 이름이 없다.
    //   따라서 생성한 배열을 접근하는 방법이 필요하고 배열을 생성할때 반환되는 참조값을 변수에 보관해 둔것
    //   그래서 변수를 통해서 배열에 접근할 수 있다.

    // int[] students = new int[5] // 1. 배열 생성
    // int[] students = x001; // 2. new int[5] 결과로 x001 참조값 반환
    // students = x001; // 3. 최종 결과

    // 인덱스
    // 배열의 위치를 나타내는 숫자
    // 배열은 0부터 시작한다
    // new int[5] 와 같이 5개의 요소를 가지는 int 형 배열을 만들었다면 인덱스는 0,1,2,3,4 가 존재한다.
    // 여기서 주의해야 할 점이 있는데 인덱스는 0부터 시작한다는 것이다.
    // 배열의 요소를 5개로 생성했지만, 인덱스는 0부터 시작한다.
    // 따라서 사용 가능한 인덱스의 범위는 0 ~ (n-1) 이 된다.
    // 그래서 students[4] 가 배열의 마지막 요소이다.

    // 만약 students[5] 와 같이 접근 가능한 배열의 인덱스 범위를 넘어가면 오류가 발생한다.
    // java.lang.ArrayIndexOutOfBoundsException:

    // 배열에 값 대입
    // students[0] = 90; //1. 배열에 값을 대입
    // x001[0] = 90;
    // 2. 변수에 있는 참조값을 통해 실제 배열에 접근.
    // 인덱스를 사용해서 해당 위치의 요소에 접근, 값 대입

    // 배열 값 읽기
    // 1. 변수 값 읽기
    // System.out.println("학생1 점수: " + students[0]);
    // 2. 변수에 있는 참조값을 통해 실제 배열에 접근. 인덱스를 사용해서 해당 위치의 요소에 접근
    // System.out.println("학생1 점수: " + x001[0]);
    // 3. 배열의 값을 읽어옴
    // System.out.println("학생1 점수: " + 90);
    // 배열을 사용하면 이렇게 참조값을 통해서 실제 배열에 접근하고 인덱스를 통해서 원하는 요소를 찾는다.

    // 기본형 vs 참조형
    // 자바의 변수 데이터 타입을 가장 크게 보면 기본형과 참조형으로 분류할 수 있다.
    // 사용하는 값을 직접 넣을 수 있는 기본형,
    // 배열 변수와 같이 메모리의 참조값을 넣을 수 있는 참조형으로 분류할 수 있다.

    // 기본형(Primitive Type)
    // 우리가 지금까지 봤던 int , long , double , boolean 처럼 변수에 사용할 값을
    // 직접 넣을 수 있는 데이터 타입을 기본형(Primitive Type)이라 한다.
    // 참조형(Reference Type)
    // int[] students 와 같이 데이터에 접근하기 위한 참조(주소)를 저장하는 데이터 타입을 참조형(Reference Type)이라 한다.
    // 뒤에서 학습하는 객체나 클래스를 담을 수 있는 변수들도 모두 참조형이다.

    // 배열은 왜 이렇게 복잡하게 참조형을 사용할까?
    // 기본형은 모두 사이즈가 명확하게 정해져있다.
    // int i; //4byte
    // long l;//8byte
    // double d; //8byte

    // 그런데 배열은 다음과 같이 동적으로 사이즈를 변경할 수 있다.
    // int size=10000; //사용자가 입력한 값을 넣었다고 가정해보자.
    // new int[size]; //이 코드가 실행되는 시점에 배열의 크기가 정해진다.

    // 기본형은 선언과 동시에 크기가 정해진다.
    // 따라서 크기를 동적으로 바꾸거나 할 수는 없다.
    // 반면에 앞서본 배열과 같은 참조형은 크기를 동적으로 할당할 수 있다.

    // 예를 들어서 Scanner 를 사용해서 사용자 입력에 따라 size 변수의 값이 변하고,
    // 생성되는 배열의 크기도 달라질 수 있다.

    // 이런 것을 동적 메모리 할당이라 한다.
    // 기본형은 선언과 동시에 사이즈가 정적으로 정해지지만,
    // 참조형을 사용하면 이처럼 동적으로 크기가 변해서 유연성을 제공할 수 있다.

    // 기본형은 사용할 값을 직접 저장한다.
    // 반면에 참조형은 메모리에 저장된 배열이나 객체의 참조를 저장한다.
    // 이로 인해 참조형은 더 복잡한 데이터 구조를 만들고 관리할 수 있다.
    // 반면 기본형은 더 빠르고 메모리를 효율적으로 처리한다.

    }
