package infJava1_1.A_8_Method;

// 메서드 사용

public class Method1 {
    public static void main(String[] args) {
        // 계산1
        int a = 1;
        int b = 2;
        System.out.println(a + "+" + b + " 연산 수행");
        int sum1 = a + b;
        System.out.println("결과1 출력: " + sum1);

        // 계산2
        int x = 10;
        int y = 20;
        System.out.println(x + "+" + y + " 연산 수행");
        int sum2 = x + y;
        System.out.println("결과2 출력: " + sum2);

        // 같은 연산을 두 번 수행한다. 코드 부분이 거의 같다.
        // 프로그램의 여러 곳에서 이와 같은 계산을 반복해야 한다면?
        // 같은 코드를 여러번 반복해서 작성해야할 것이다.
        // 출력하는 부분을 변경하거나 제거하고 싶다면 해당 코드를 찾아다니면서 수정해야한다.

        // 이 문제를 해결하기 위해 함수를 사용한다.

        // 함수 정의
        // add(a, b) = a + b
        // 이름이 add 이고 a, b라는 두 값을 받는 함수이다. 그리고 이 함수는 a + b 연산을 수행한다.

        // 함수 사용
        // add(1, 2) -> 결과 : 3
        // add(5, 6) -> 결과 : 11
        // add(3, 5) -> 결과 : 8
        // 함수에 값을 입력하면, 함수가 가진 연산을 처리한 다음 결과를 출력한다. 여기서는 단순히 a+b 라는 연산을 수행한다.
        // 여러번 같은 계산을 해야한다면 지금처럼 함수를 만들어두고(정의), 필요한 입력 값을 넣어서 해당 함수를 호출하면 된다.
        // 함수는 마치 블랙박스와 같다. 함수를 호출할 때는 외부에서는 필요한 값만 입력하면 된다. 그러면 계산된 결과가 출력된다.
        // 같은 함수를 다른 입력 값으로 여러번 호출 할 수 있다.
        // 핵심은 함수를 한번 정의해두면 계속해서 재사용할 수 있다는 점이다.

        // 함수를 사용하면 필요한 기능을 미리 정의해두고 필요할때 마다 호출해서 사용할 수 있기 때문에 코드 중복 문제 등을 해결할 수 있다.
        // 프로그램 언어들은 오래 전부터 이런 문제를 해결하기 위해 수학의 함수라는 개념을 차용해서 사용한다.
        // 완전히 그대로 함수를 쓰는 건 아니고 프로그램에 맞게 이 개념을 컨셉을 가져와서 사용함
    }
}
