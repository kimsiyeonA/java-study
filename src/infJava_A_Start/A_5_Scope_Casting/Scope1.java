package infJava_A_Start.A_5_Scope_Casting;

// 지역변수와 스코프
// 변수를 선언한 위치에 따라 지역변수, 맴버 변수(클래스 변수, 인스턴스 변수)와 같이 분류된다.
// 자금까지 학습한 변수들을 모두 영어로 로컬변수(Local Variable) 한글로 지역변수 한다.

// 지역변수는 이름 그대로 특정 지역에서만 사용할 수 있는 변수라는 뜻이다.
// 여기서 말하는 지역이 바로 변수가 선언된 코드블록{} 이다.
// 지역변수는 자신이 선언된 블록{} 안에서만 생존하고, 자신이 선언된 코드블록을 벗어나게 제거된다.
// 이후에는 접근할 수 없다.
public class Scope1 {
    public static void main(String[] args) {
        int m = 10; // m 생존 시작
        if(true){ // if문 안에서 선언된 변수는 if문 안에서만 생존함
            int x = 10; // x 생존 시작
            System.out.println("if m = "+m);
            System.out.println("if x = "+x);
        } // x 생존 종료
        System.out.println("main m = "+m);
        // System.out.println("main x = "+x); // 생존의 범위를 벗어나서 if문에 x 변수를 사용하지 못함
    } // m 생존 종료

    // int m
    // main {}의 생존 블록안에서 선언되었다. 따라서 변수를 선언한 시점부터 main{}의 코드 블록이 종료될때까지 생존한다.
    // if{} 블록 내부에서도 외부 블록에서 선언된 m에 접근할 수 있다. 쉽게 이야기 해서 생존 범위만 맞으면 다 접근할 수 있다.

    // int x
    // if{}블록 안에서 선언되었다. 따라서 변수를 선언한 시점부터 if{}의 코드 블록이 종료될 때까지 생존한다.
    // if{} 내부에서는 자신의 범위에서 선언한 x에 당연히 접근할 수 있다,
    // if{} 코드 블록이 끝나버리면 x는 제거된다. 따라서 더는 x에 접근할 수 없다.
    // 따라서 이후에 접근하먄 cannot find symbol 이라는 변수 이름을 찾을 수 없다는 컴파일오류가 발생한다.

    // 지역변수는본인의 코드블록 안에서만 생존한다 그리고 코드 블록 안에서는 얼마든지 접근할 수 있다.
    // 하지만 자신의 코드 블록을 벗어나면 제거되기 때문에 접근할 수 없다.

    // 변수의 접근 가능한 범위를 스코프(Scope)라 한다. Scope는 범위라는 뜻이다.
    // int m은 main{} 전체에서 접근할 수 있기 때문에 스코프가 넓고,
    // int x는 if{} 코드블록 안에서만 접근할 수 있기 때문에 스코프가 짧다.


}
